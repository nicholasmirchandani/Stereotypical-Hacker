/** Stereotypical-Hacker
 * SocketConnection.h
 * Lloyd Black
 * April 2, 2020
 * A class to streamline the use of sockets/networking
 */

// NOTE FOR ALL NON-LLOYD PEOPLE: No need to implement these, I'm in the process of implementing all this
//   Let me know if anybody wants any other functionality, but I think this should cover most of what we want
#ifndef SOCKET_CONNECTION
#define SOCKET_CONNECTION

#include "sending_failure.h"
#include "reading_failure.h"
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>

#include <errno.h>
#include <stdio.h>
#include <string.h>
#include <cstdlib>

class SocketConnection {
	
	private:
		
		int socketFD;
		int portnum;
		
		char mode; // EG Server or Client

		bool isAlive;
		
		struct sockaddr_in localAddressInfo; // getsockname() stuff, contains local IP and Port number
		struct sockaddr_in peerAddressInfo; // getpeername() stuff

	public:
		
		/* Server Constructor: sets up a socket that listens for incoming connections
		 * @param: int pn - the port number to listen for connections on
		 */
		SocketConnection(int pn);
		

		/* Constructor for individual connections from the server to clients
		 * @param: int fd - a file descriptor generated by an 'l' mode SocketConnection from the "accept()" method.
		 * @param: struct sockaddr_in localAddr - info about the local address of the socket (provided by listener)
 		 * @param: struct sockaddr_in peerAddr - info about the socket's peer's (provided by listener)
  		 */
		SocketConnection(int fd, struct sockaddr_in localAddr, struct sockaddr_in peerAddr);
		

		/* Client-side Socket Constructor
		 * @param: string serverIP - a string of the IP address to connect to
		 * @param: int pn - the destination port number
		 */
		SocketConnection(char* serverIP, int pn);

		~SocketConnection();


		/* Writes data of type T to socket
		 * @param: void* data - pointer to data to send
		 * @param: int len - the number of bytes of data to send
		 */
		void WriteToStream(void* Data, int len);

		/* Reads data of type T from socket.
		 * @param: int len - the number of bytes of data to read
		 * @return: void* - Pointer to the data read from the socket
		 */
		void* ReadFromStream(int len);

		/* Used in listening SocketConnections, generates new socket connections used for actual communication
		 * @return: SocketConnection<T>* - a pointer to a new SocketConnection that can be used for communication between hosts.
		 */
		SocketConnection* GetClientConnection();

		
		void KillConnection();

		bool IsAlive();
		
		// std::string GetDestIP();
		// std::string GetSourceIP();

};

#endif